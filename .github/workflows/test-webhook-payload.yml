# .github/workflows/test-webhook-payload.yml
name: "Test: Dispatch Latest Post to Webhook (Manual)"

# 1. Manual trigger for testing only
on:
  workflow_dispatch:

jobs:
  debug-webhook:
    runs-on: ubuntu-latest

    steps:
      # 2. Checkout your repo
      - name: Step 1: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Debug: List repo files
        run: |
          echo "🔍 Repo root contents:"
          ls -R .

      # 3. Get the last committed Markdown file
      - name: Step 2: Find last committed .md file
        id: find_file
        run: |
          FILE=$(git log -1 --name-only --pretty=format: | grep '\.md$' | head -n1)
          echo "🔍 Detected file: $FILE"
          echo "file=$FILE" >> $GITHUB_OUTPUT

      # 4. Dump its front-matter for inspection
      - name: Step 3: Show raw front-matter
        run: |
          F="${{ steps.find_file.outputs.file }}"
          echo "📄 Reading front-matter from: $F"
          sed -n '/^---$/,/^---$/p' "$F"

      # 5. Extract fields with echo debugging
      - name: Step 4: Parse front-matter fields
        id: parse
        run: |
          F="${{ steps.find_file.outputs.file }}"
          FM=$(sed -n '/^---$/,/^---$/p' "$F" | sed '1d;$d')
          echo "---\n$FM\n---"

          # Helpers
          get_field() { echo "$FM" | awk -F": " "/^$1: /{print substr(\$0, index(\$0,\$2))}"; }
          extract_list(){
            echo "$FM" \
              | sed -n "/^$1:/,/^[^[:space:]]/p" \
              | tail -n +2 \
              | grep '^[[:space:]]*-' \
              | sed 's/^[[:space:]]*-\s*//'
          }

          TITLE=$(get_field title | sed "s/^'//;s/'$//")
          echo "🔹 title: $TITLE"
          DESCRIPTION=$(get_field excerpt | sed "s/^'//;s/'$//")
          echo "🔹 description: $DESCRIPTION"

          mapfile -t CATS < <(extract_list categories)
          echo "🔹 categories: ${CATS[*]}"
          mapfile -t TAGS < <(extract_list tags)
          echo "🔹 tags: ${TAGS[*]}"

          HASHTAGS=$(printf "#%s " "${TAGS[@]}" | sed 's/ $//')
          echo "🔹 hashtags: $HASHTAGS"

          TEASER=$(echo "$FM" | awk '/^  teaser: /{print $2}' | sed 's#^/##')
          IMAGE_PATH="https://blog.lynxo.in/${TEASER}"
          echo "🔹 image_path: $IMAGE_PATH"

          SLUG="${F%.md}"
          echo "🔹 post_slug: $SLUG"

          CAT_SLUG=$(echo "${CATS[0]}" | tr '[:upper:]' '[:lower:]')
          POST_LINK="https://blog.lynxo.in/${CAT_SLUG}/${SLUG}"
          POST_LINK=$(echo "$POST_LINK" | tr '[:upper:]' '[:lower:]')
          echo "🔹 post_link: $POST_LINK"

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "categories=${CATS[*]}" >> $GITHUB_OUTPUT
          echo "tags=${TAGS[*]}" >> $GITHUB_OUTPUT
          echo "hashtags=$HASHTAGS" >> $GITHUB_OUTPUT
          echo "image_path=$IMAGE_PATH" >> $GITHUB_OUTPUT
          echo "post_slug=$SLUG" >> $GITHUB_OUTPUT
          echo "post_link=$POST_LINK" >> $GITHUB_OUTPUT

      # 6. Assemble the full JSON payload and print it
      - name: Step 5: Build and echo JSON payload
        id: payload
        run: |
          echo "💡 Assembling JSON payload..."
          PAYLOAD=$(jq -n \
            --arg site_url "https://blog.lynxo.in" \
            --arg title "${{ steps.parse.outputs.title }}" \
            --arg description "${{ steps.parse.outputs.description }}" \
            --arg post_slug "${{ steps.parse.outputs.post_slug }}" \
            --arg image_path "${{ steps.parse.outputs.image_path }}" \
            --argjson tags "$(printf '%s\n' ${{ steps.parse.outputs.tags }} | jq -R . | jq -s .)" \
            --arg hashtags "${{ steps.parse.outputs.hashtags }}" \
            --argjson categories "$(printf '%s\n' ${{ steps.parse.outputs.categories }} | jq -R . | jq -s .)" \
            --arg post_link "${{ steps.parse.outputs.post_link }}" \
            --arg author "Rajan Sandha" \
            '{
              site_url: $site_url,
              title: $title,
              description: $description,
              post_slug: $post_slug,
              image_path: $image_path,
              tags: $tags,
              hashtags: $hashtags,
              categories: $categories,
              post_link: $post_link,
              author: $author
            }'
          )
          echo "📤 Payload:"
          echo "$PAYLOAD"
          echo "payload=$PAYLOAD" >> $GITHUB_OUTPUT

      # 7. (Optional) Send it—comment out until you're ready
      - name: Step 6: POST to webhook (disabled)
        if: false
        run: |
          echo "Would send to ${{ secrets.MY_WEBHOOK_URL }}:"
          echo "${{ steps.payload.outputs.payload }}"
          # curl -X POST -H 'Content-Type: application/json' \
          #      -d "${{ steps.payload.outputs.payload }}" \
          #      "${{ secrets.MY_WEBHOOK_URL }}"
